import kotlin.Boolean;
import kotlin.collections.List;
import kotlin.collections.Map;
import kotlin.collections.Set;
import kotlin.String;
import kotlinx.datetime.Instant;

PRAGMA user_version = 3;

CREATE TABLE IF NOT EXISTS HttpTransaction (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    method TEXT,
    requestDate INTEGER AS Instant,
    responseDate INTEGER AS Instant,
    tookMs INTEGER,
    protocol TEXT,
    url TEXT,
    host TEXT,
    path TEXT,
    scheme TEXT,
    responseTlsVersion TEXT DEFAULT NULL,
    responseCipherSuite TEXT DEFAULT NULL,
    requestPayloadSize INTEGER,
    requestContentType TEXT,
    requestHeaders TEXT AS Set<Map.Entry<String, List<String>>>,
    requestHeadersSize INTEGER,
    requestBody TEXT,
    isRequestBodyEncoded INTEGER AS Boolean DEFAULT 0,
    responseCode INTEGER,
    responseMessage TEXT,
    error TEXT,
    responsePayloadSize INTEGER,
    responseContentType TEXT,
    responseHeaders TEXT AS Set<Map.Entry<String, List<String>>>,
    responseHeadersSize INTEGER,
    responseBody TEXT,
    isResponseBodyEncoded INTEGER AS Boolean DEFAULT 0,
    originalRequestHeaders TEXT AS Set<Map.Entry<String, List<String>>>,
    originalRequestBody TEXT,
    originalResponseCode INTEGER,
    originalResponseHeaders TEXT AS Set<Map.Entry<String, List<String>>>,
    originalResponseBody TEXT
);

CREATE INDEX IF NOT EXISTS HttpTransaction_method ON HttpTransaction(method);
CREATE INDEX IF NOT EXISTS HttpTransaction_requestDate ON HttpTransaction(requestDate);
CREATE INDEX IF NOT EXISTS HttpTransaction_responseDate ON HttpTransaction(responseDate);
CREATE INDEX IF NOT EXISTS HttpTransaction_host ON HttpTransaction(host);


getById:
SELECT * FROM HttpTransaction WHERE id = ?;

getLast:
SELECT * FROM HttpTransaction ORDER BY id DESC LIMIT 1;

getAll:
SELECT * FROM HttpTransaction;

getAllLatest:
SELECT * FROM HttpTransaction ORDER BY requestDate DESC;

getAllCount:
SELECT COUNT(*) FROM HttpTransaction;

getAllLatestForDateRange:
SELECT * FROM HttpTransaction WHERE requestDate BETWEEN :startDate AND :endDate ORDER BY requestDate DESC;

getAllLatestWithLimit:
SELECT id, requestDate, tookMs, protocol, method, host, path, scheme, responseCode,
requestPayloadSize, responsePayloadSize, error, CASE WHEN originalResponseBody IS NULL
AND originalResponseHeaders IS NULL AND originalResponseBody IS NULL AND originalResponseHeaders IS NULL
THEN 0 ELSE 1 END AS isOverriddenNum FROM HttpTransaction WHERE requestDate BETWEEN :startDate AND :endDate AND
(responseCode LIKE :codeQuery AND path LIKE :pathQuery) ORDER BY requestDate DESC;

insert:
INSERT INTO HttpTransaction(
   method,
   requestDate,
   responseDate,
   tookMs,
   protocol,
   url,
   host,
   path,
   scheme,
   responseTlsVersion,
   responseCipherSuite,
   requestPayloadSize,
   requestContentType,
   requestHeaders,
   originalRequestHeaders,
   requestHeadersSize,
   requestBody,
   originalRequestBody,
   isRequestBodyEncoded,
   responseCode,
   responseMessage,
   error,
   responsePayloadSize,
   responseContentType,
   responseHeaders,
   originalResponseHeaders,
   responseHeadersSize,
   responseBody,
   originalResponseBody,
   isResponseBodyEncoded
)
VALUES ?;

insertOrReplace:
INSERT OR REPLACE INTO HttpTransaction(
   id,
   method,
   requestDate,
   responseDate,
   tookMs,
   protocol,
   url,
   host,
   path,
   scheme,
   responseTlsVersion,
   responseCipherSuite,
   requestPayloadSize,
   requestContentType,
   requestHeaders,
   originalRequestHeaders,
   requestHeadersSize,
   requestBody,
   originalRequestBody,
   isRequestBodyEncoded,
   responseCode,
   responseMessage,
   error,
   responsePayloadSize,
   responseContentType,
   responseHeaders,
   originalResponseHeaders,
   responseHeadersSize,
   responseBody,
   originalResponseBody,
   isResponseBodyEncoded
)
VALUES ?;

delete:
DELETE FROM HttpTransaction WHERE id = ?;

deleteAll:
DELETE FROM HttpTransaction;

deleteBefore:
DELETE FROM HttpTransaction WHERE requestDate < ?;

update:
UPDATE HttpTransaction
SET responseCode = ?,
    responseDate = ?,
    tookMs = ?,
    responseMessage = ?,
    responsePayloadSize = ?,
    responseContentType = ?,
    responseHeaders = ?,
    originalResponseHeaders = ?,
    responseHeadersSize = ?,
    responseTlsVersion = ?,
    responseCipherSuite = ?,
    responseBody = ?,
    originalResponseBody = ?,
    isResponseBodyEncoded = ?
WHERE id = :id;

lastInsertRowId:
SELECT last_insert_rowid();